def projectName = "backEnd"
def mails = "Angelo.deliessche@gmail.com"

pipeline{
    triggers { pollSCM('* * * * *') }
    options { timeout(time: 1, unit: 'HOURS') }
    agent any
    stages {
        stage("Build & Test") {
            options { timeout(time: 1, unit: 'HOURS') }
            steps {
                script {
                    dir(projectName) {
                        //sh("mvn clean package -Pprod -e")
                        sh("cp target/daily-follow-up-0.0.1.jar /home/pi/Documents/Project/Dockerz/ProdContainer/backEnd/target/daily-follow-up-0.0.1.jar")
                        sh("docker build . -f /home/pi/Documents/Project/Dockerz/ProdContainer/Dockerfile")
                        sh("docker service update --image prodimage:latest prod_prodapplication")
                    }
                }
            } 
            post {
                always{
                    junit '**/target/surefire-reports/*.xml'
                }
                success {
                    emailext(
                        body: "MEP Correctly done\nPlus d'information sur : ${env.BUILD_URL}", mimeType: 'text/html',
                        replyTo: '', subject: "[${env.JOB_NAME}] Success - Rapport de build",
                        to: "${mails}", recipientProviders: []
                    )
                }
                failure {
                    emailext(
                        body: "Plus d'information sur : ${env.BUILD_URL}", mimeType: 'text/html',
                        replyTo: '', subject: "[${env.JOB_NAME}] FAILURE - Rapport de build",
                        to: "${mails}", recipientProviders: []
                    )
                }
                fixed {
                    emailext(
                        body: "Plus d'information sur : ${env.BUILD_URL}", mimeType: 'text/html',
                        replyTo: '', subject: "[${env.JOB_NAME}] Fixed - Rapport de build",
                        to: "${mails}", recipientProviders: []
                    )
                }
            }
        }
    }
}